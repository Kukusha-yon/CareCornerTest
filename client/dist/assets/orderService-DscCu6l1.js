import{d as n}from"./index-DBuhCPqP.js";class s extends Error{constructor(o,t="UNKNOWN_ERROR",r={}){super(o),this.name="OrderServiceError",this.code=t,this.details=r}}const R=async()=>{try{return(await n.get("orders/user")).data}catch(e){throw e.response?new s(e.response.data.message||"Failed to fetch user orders","FETCH_ERROR",{status:e.response.status,data:e.response.data}):new s("Network error while fetching user orders","NETWORK_ERROR",{originalError:e.message})}},u=async()=>{try{return(await n.get("orders")).data}catch(e){throw e.response?new s(e.response.data.message||"Failed to fetch all orders","FETCH_ERROR",{status:e.response.status,data:e.response.data}):new s("Network error while fetching all orders","NETWORK_ERROR",{originalError:e.message})}},l=async e=>{var o,t;try{if(!localStorage.getItem("token"))throw new s("Authentication required","AUTH_ERROR");if(!e.shippingDetails||!e.items||!e.paymentMethod)throw new s("Missing required order data","VALIDATION_ERROR");return(await n.post("/orders",e)).data}catch(r){if(r instanceof s)throw r;if(r.response){const a=r.response.status,d=(o=r.config)==null?void 0:o.url,i=((t=r.response.data)==null?void 0:t.message)||"Failed to create order";throw a===404&&i.includes("Product")&&i.includes("not found")?new s("One or more products in your cart are no longer available.","PRODUCT_NOT_FOUND",{status:a,url:d,data:r.response.data}):a===401?new s("Authentication required. Please log in again.","AUTH_ERROR",{status:a,url:d}):a===404?new s("Order service is unavailable. Please try again later.","NOT_FOUND_ERROR",{status:a,url:d}):new s(i,"API_ERROR",{status:a,data:r.response.data})}else throw r.request?new s("Could not connect to the order service. Please check your internet connection.","NETWORK_ERROR"):new s(r.message||"An unexpected error occurred","UNEXPECTED_ERROR")}},w=async(e,o)=>{try{return(await n.put(`orders/${e}/status`,{status:o})).data}catch(t){throw t.response?new s(t.response.data.message||"Failed to update order status","UPDATE_ERROR",{status:t.response.status,data:t.response.data}):new s("Network error while updating order status","NETWORK_ERROR",{originalError:t.message})}},p=async(e="week")=>{try{return(await n.get(`admin/orders/stats?timeRange=${e}`)).data}catch(o){throw o}},h=async e=>{var o,t;try{return(await n.delete(`orders/${e}`)).data}catch(r){throw new Error(((t=(o=r.response)==null?void 0:o.data)==null?void 0:t.message)||"Failed to delete order")}};export{u as a,p as b,l as c,h as d,R as g,w as u};
